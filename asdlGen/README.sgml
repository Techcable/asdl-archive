<!doctype linuxdoc system [   
<!entity % decls.common system "src/doc/ldoc/common-decls.ldoc">
  %decls.common;
]>
<article>
<title>README for &asdlGen; version &asdlGen.version;
<author>&author.danwang;
<date>&asdlGen.release-date;
<p>
This is the second public release of &asdlGen;. It is still missing a few
important library functions to handle floating point numbers. The next
release will include the missing functions. This release contains bug fixes
an some incompatible changes in the way &asdlGen; produces C code. New
features include:
<itemize>
<item> A library of standard types for things such as integers of guaranteed
   minimum precision (signed and unsigned 8,16,32,64 bit types)
   (IEEE float support is the next on the list, stubs are currently there)

<item>Support code to interpret the ASDL <em>int</em> type as either a
      bignum or fixednum in C and SML.

<item> The Java and C++ code now produce visitors patterns for the generated
   types. There's also an experimental C header file with macros to make
   working with ASDL types a bit easier.

<item> A preliminary ASDL specification of the
  <url url="&url.suif;" name="SUIF 2.0"> IR. A translator between the ASDL 
  infrastructure and the existing SUIF 2.0 infrastructure is in the works.
  This is included to elicit comments from developers who are 
  interested in a SUIF 2.0 interface.

<item> The C code by default uses primitive types from 
  <url url="http://www.cs.princeton.edu/software/cii/" 
  name="C Interface and Implementations">. 
</itemize>

<sect>COPYRIGHT<p>
&asdlGen; is distributed under the following terms.
&doc.copyright;
<sect>Installation<p>
Both binary and source releases are available.
See <htmlurl url="INSTALL.html" name="INSTALL"> for details. 

<sect>Changes<p>
See <htmlurl url="CHANGES.html" name="CHANGES"> for details. 
See the <url
 url="http://www.cs.princeton.edu/zephyr/ASDL/asdlGen-bugs.html" name="master
 bug list"> for bug hunting details.

<sect>Documentation<p>
There is now a reference manual available in 
<url url="doc/html/manual.html" name="HTML"> and
<url url="doc/manual.ps/" name="Postscript">. A step by step tutorial is
in the works. 

<sect>Using zsuif.asdl<p> 
This distribution comes with a preliminary <url url="&url.suif;"
name="SUIF 2.0"> specification in <tt><url url="src/asdl/zsuif/"></tt>.  To
generate and compile the code you need to compile against the
various support files and libraries found installed in
<tt><url url="include/asdlGen"></tt>, <tt><url url="share/asdlGen"></tt>, and
<tt><url url="lib/asdlGen"></tt>. For example assuming unpacked binary
distribution is in <tt>/usr/local/</tt> to produce working Java code
<tscreen><verb>
% cd /usr/local/asdlGen-&asdlGen.version;/src/asdl/zsuif
% /usr/local/asdlGen-&asdlGen.version;/bin/asdlGen --java zsuif.asdl ../std-types.asdl
% setenv CLASSPATH /usr/local/asdlGen-&asdlGen.version;/share/asdlGen/asdl.zip:${CLASSPATH}
% javac asts/zsuif/*.java
</verb></tscreen>

<p>To compile and link against the C code produced 
<tscreen><verb>
% cd /usr/local/asdlGen-&asdlGen.version;/src/asdl/zsuif
% /usr/local/asdlGen-&asdlGen.version;/bin/asdlGen --c zsuif.asdl ../std-types.asdl
% cc -c -I /usr/local/asdlGen-&asdlGen.version;/include/asdlGen/ zsuif.c
% cc mymain.o -L /usr/local/asdlGen-&asdlGen.version;/lib/asdlGen/ -lasdl -lcii
</verb></tscreen>

<p> You can also generate some preliminary HTML documentation from the
specification with the following commands
<tscreen><verb>
% cd /usr/local/asdlGen-&asdlGen.version;/src/asdl/zsuif
% /usr/local/asdlGen-&asdlGen.version;/bin/asdlGen --doc zsuif.asdl ../std-types.asdl
%  netscape doc/zsuif.html
</verb></tscreen>

<sect>Questions Comments?<p>
Questions and comments should be directed to 
<htmlurl url="&url.zephyr-discussion" name="zephyr-discusssion@virginia.edu">
For more information about the
Zephyr Project see <url url="&url.zephyr;"> For the latest information
about ASDL see <url url="&url.asdlGen">

For applications that wish to manipulate generic ASDL values there are
various language specific libraries that take the type environment produced
by the --typ option and are able to manipulate the generic values.  An
example of this can be found in <htmlurl url="src/c/" name="src/c/xlate.c">, 
and <htmlurl url="src/sml/pp-pickle" name="src/sml/pp-pickle.sml">, which
depend on the ASDL descriptions found in src/asdl/generic.asdl.

<sect>TODO<p>
<itemize>
<item> In the not too distant future, pickle files will come stamped with a
magic number that identifies the type environment from which it was
generated. If the type environments are not exactly the same. The code will
complain. Right now the pickle code generates untyped pickles. So if you
feed it a pickle that is of the wrong type it will break.  

<item> None of the translators warn you when it has to mangle and
identifier to avoid using a reserved keyword.
<item> The pretty printing rules could be tweaked. 
<item> The handling of primitive types is more ad hoc than I'd like. 
</itemize>
</article>



