(*
 * This file was automatically generated by MDGen (v2.0)
 * from the machine description file "x86/x86.md".
 *)


functor X86RTLProps(structure Instr : X86INSTR
                    structure RegionProps : REGION_PROPERTIES
                    structure Asm : INSTRUCTION_EMITTER where I = Instr
                      sharing Instr.Region = RegionProps.Region
                   ) : RTL_PROPERTIES =
struct
   structure I   = Instr
   structure C   = I.C
   structure RTL = MLTreeRTL
   structure T   = RTL.T
   
   datatype opnkind =
     IMM     (* a constant operand *)
   | REG     (* can be renamed *)
   | FIX     (* cannot be renamed *)
   | MEM     (* memory *)
   | CTRL    (* control dependence *)
   
   fun error msg = MLRiscErrorMsg.error("X86RTLProps",msg)
   
   fun bug(msg,instr) =
   let val Asm.S.STREAM{emit, ...} = Asm.makeStream []
   in  emit (fn r => r) instr; error msg end
   
   structure X86RTL = X86RTL(BuildRTL)
   structure Arch = struct
      local
      in
      end
   end

   fun rtl instr = let
          fun undefined () = bug ("rtl", instr)
          fun query _ = undefined ()
       in query instr
       end

   fun defUse {immed, operand} instr = let
          fun undefined () = bug ("defUse", instr)
          fun getOpnd' opnd = operand opnd
          fun getOpnd x = getOpnd' x
          fun getImm i  = immed i
          fun getRegionUse r = RegionProps.readFrom r
          fun getRegionDef r =
          let val (d,u) = RegionProps.writeTo r
          in  d end
          fun withKind(k,l) = l
          fun getCellSet (GP, FP, CC) = (withKind (C.GP, GP)) @ ((withKind (C.FP, FP)) @ (withKind (C.CC, CC)))
          fun query _ = undefined ()
       in query instr
       end

   fun defUseWithCellKind {immed, operand} instr = let
          fun undefined () = bug ("defUseWithCellKind", instr)
          fun getOpnd' opnd = operand opnd
          fun getOpnd x = (getOpnd' x,C.GP)
          fun getImm x  = (immed x,C.GP)
          fun getRegionUse r = 
            map (fn r => (r,C.MEM)) (RegionProps.readFrom r)
          fun getRegionDef r = 
            let val (d,u) = RegionProps.writeTo r
            in  map (fn r => (r,C.MEM)) d end
          fun withKind(k,l) = map (fn x => (x,k)) l
          fun getCellSet (GP, FP, CC) = (withKind (C.GP, GP)) @ ((withKind (C.FP, FP)) @ (withKind (C.CC, CC)))
          fun query _ = undefined ()
       in query instr
       end

   fun opnKind instr = let
          fun undefined () = bug ("opnKind", instr)
          fun REGs rs = map (fn _ => REG) rs
          fun FIXs rs = map (fn _ => FIX) rs
          fun MEMs rs = map (fn _ => MEM) rs
          fun getCellSet (GP, FP, CC) = (FIXs GP) @ ((FIXs FP) @ (FIXs CC))
          fun getRegionUse r = MEMs (RegionProps.readFrom r)
          fun getRegionDef r = 
          let val (d,u) = RegionProps.writeTo r
          in  MEMs d end
          fun query _ = undefined ()
       in query instr
       end

   fun updateCellKind {update} instr = let
          fun undefined () = bug ("updateCellKind", instr)
          fun enterGP r = update (r, C.GP)
          and enterFP r = update (r, C.FP)
          and enterCC r = update (r, C.CC)
          and enterMEM r = update (r, C.MEM)
          and enterCTRL r = update (r, C.CTRL)
          fun enterCellSet (GP, FP, CC) = 
              ( app enterFP FP; 
              app enterCC CC )
          fun enterRegionUse r = app enterMEM (RegionProps.readFrom r)
          fun enterRegionDef r = 
          let val (d,u) = RegionProps.writeTo r
          in  app enterMEM d; app enterMEM u end
          fun query _ = undefined ()
       in query instr
       end

end

