(*
 * This file was automatically generated by MDGen (v2.0)
 * from the machine description file "mips/mips.md".
 *)


signature MIPSINSTR =
sig
   structure C : MIPSCELLS
   structure Constant: CONSTANT
   structure LabelExp: LABELEXP
   structure Region : REGION
      sharing Constant = LabelExp.Constant
   datatype load =
     LD
   | LW
   | LH
   | LHU
   | LB
   | LBU
   | LWL
   | LWR
   | LWU
   | LDL
   | LDR
   | ULH
   | ULHU
   | ULW
   | ULD
   datatype store =
     SD
   | SW
   | SH
   | SB
   | SWL
   | SWR
   | SDL
   | SDR
   | USH
   | USW
   | USD
   datatype fload =
     L_D
   | L_S
   | LDXC1
   | LWXC1
   datatype fstore =
     S_D
   | S_S
   | SDXC1
   | SWXC1
   datatype fcond =
     UN
   | EQ
   | UEQ
   | OLT
   | ULT
   | OLE
   | ULE
   | NGLE
   | NGL
   | LT
   | NGE
   | LE
   | NGT
   datatype arith =
     ADD
   | ADDU
   | AND
   | XOR
   | MUL
   | MULO
   | MULOU
   | NOR
   | OR
   | SEQ
   | SGT
   | SGE
   | SGEU
   | SGTU
   | SLT
   | SLE
   | SLEU
   | SLTU
   | SNE
   | SUB
   | SUBU
   | REM
   | REMU
   | SRA
   | SLL
   | SRL
   | ROR
   | ROL
   | MOVN
   | MOVZ
   | DADD
   | DADDU
   | DMUL
   | DMULO
   | DMULOU
   | DSUB
   | DSUBU
   | DREM
   | DREMU
   | DROL
   | DROR
   | DSRA
   | DSLL
   | DSRL
   datatype unary =
     ABS
   | NEG
   | NEGU
   | NOT
   | DABS
   | DNEG
   | DNEGU
   datatype multiply =
     MULT
   | MULTU
   | DMULT
   | DMULTU
   datatype divide =
     DIV
   | DIVU
   | DDIV
   | DDIVU
   datatype trap =
     TEQ
   | TNE
   | TLT
   | TLTU
   | TGE
   | TGEU
   datatype farith =
     ADD_D
   | ADD_S
   | SUB_D
   | SUB_S
   | MUL_D
   | MUL_S
   | DIV_D
   | DIV_S
   datatype funary =
     ABS_D
   | ABS_S
   | CVT_SD
   | CVT_SW
   | CVT_DS
   | CVT_DW
   | CVT_WS
   | CVT_WD
   | CVT_SL
   | CVT_DL
   | CVT_LS
   | CVT_LD
   datatype farith3 =
     MADD_D
   | MADD_S
   | NMADD_D
   | NMADD_S
   | MSUB_D
   | MSUB_S
   | NMSUB_D
   | NMSUB_S
   datatype fround =
     TRUNC_WS
   | TRUNC_WD
   | ROUND_WS
   | ROUND_WD
   | CEIL_WD
   | CEIL_WS
   | CEILU_WD
   | CEILU_WS
   | FLOOR_WD
   | FLOOR_WS
   | FLOORU_WD
   | FLOORU_WS
   | ROUNDU_WD
   | ROUNDU_WS
   | TRUNCU_WD
   | TRUNCU_WS
   | TRUNC_LS
   | TRUNC_LD
   | ROUND_LS
   | ROUND_LD
   | CEIL_LS
   | CEIL_LD
   | FLOOR_LS
   | FLOOR_LD
   datatype fmt =
     SINGLE
   | DOUBLE
   datatype operand =
     Imm of int
   | Reg of int
   | Lab of LabelExp.labexp
   | HiLab of LabelExp.labexp
   | LoLab of LabelExp.labexp
   datatype ea =
     Direct of int
   | FDirect of int
   | Displace of {base:int, disp:int}
   type addressing_mode = (C.cell * operand)
   datatype instruction =
     NOP
   | LA of {rd:int, b:int, d:operand}
   | DLA of {rd:int, b:int, d:operand}
   | LOAD of {l:load, rd:int, b:int, d:operand, mem:Region.region}
   | STORE of {s:store, rs:int, b:int, d:operand, mem:Region.region}
   | FLOAD of {l:fload, fd:int, b:int, d:operand, mem:Region.region}
   | FSTORE of {s:fstore, fs:int, b:int, d:operand, mem:Region.region}
   | FCMP of {cond:fcond, fmt:fmt, fs1:int, fs2:int}
   | TRAP of {t:trap, rs:int, i:operand}
   | JUMP of int
   | BEQ of (bool * int * int * operand)
   | BCOP1 of (bool * operand)
   | SETBASEADDR of (operand * int)
   | LOADF of (int * operand * int * int)
   | BRANCH of (bool * int * int * operand * int * operand)
   | BRANCH_COP1 of (bool * operand * int * operand)
   | ARITH of {oper:arith, rd:int, rs:int, i:operand}
   | UNARY of {oper:unary, rd:int, rs:int}
   | MULTIPLY of {oper:multiply, rd:int, rs:int}
   | DIVIDE of {oper:divide, rd:int, rs:int}
   | MFLO of int
   | MTLO of int
   | MFHI of int
   | MTHI of int
   | BREAK of int
   | FARITH of {oper:farith, fd:int, fs1:int, fs2:int}
   | FUNARY of {oper:funary, fd:int, fs:int}
   | FARITH3 of {oper:farith3, fd:int, fs1:int, fs2:int, fs3:int}
   | FROUND of {oper:fround, fd:int, fs1:int, rs2:int}
   | MTC1 of (int * int)
   | LWC1 of (int * int * operand)
   | SWC1 of (int * int * operand)
   | LUI of (int * operand)
   | LDC1 of (int * int * operand)
   | SDC1 of (int * int * operand)
   | COPY of {dst:int list, src:int list, impl:instruction list option ref
     , tmp:ea option}
   | FCOPY of {dst:int list, src:int list, impl:instruction list option ref
     , tmp:ea option}
   | ANNOTATION of {i:instruction, a:Annotations.annotation}
   | PHI of {}
   | SOURCE of {}
   | SINK of {}
end

functor MIPSInstr(structure LabelExp : LABELEXP
                  structure Region   : REGION
                 ) : MIPSINSTR =
struct
   structure C = MIPSCells
   structure Region = Region
   structure LabelExp = LabelExp
   structure Constant = LabelExp.Constant
   datatype load =
     LD
   | LW
   | LH
   | LHU
   | LB
   | LBU
   | LWL
   | LWR
   | LWU
   | LDL
   | LDR
   | ULH
   | ULHU
   | ULW
   | ULD
   datatype store =
     SD
   | SW
   | SH
   | SB
   | SWL
   | SWR
   | SDL
   | SDR
   | USH
   | USW
   | USD
   datatype fload =
     L_D
   | L_S
   | LDXC1
   | LWXC1
   datatype fstore =
     S_D
   | S_S
   | SDXC1
   | SWXC1
   datatype fcond =
     UN
   | EQ
   | UEQ
   | OLT
   | ULT
   | OLE
   | ULE
   | NGLE
   | NGL
   | LT
   | NGE
   | LE
   | NGT
   datatype arith =
     ADD
   | ADDU
   | AND
   | XOR
   | MUL
   | MULO
   | MULOU
   | NOR
   | OR
   | SEQ
   | SGT
   | SGE
   | SGEU
   | SGTU
   | SLT
   | SLE
   | SLEU
   | SLTU
   | SNE
   | SUB
   | SUBU
   | REM
   | REMU
   | SRA
   | SLL
   | SRL
   | ROR
   | ROL
   | MOVN
   | MOVZ
   | DADD
   | DADDU
   | DMUL
   | DMULO
   | DMULOU
   | DSUB
   | DSUBU
   | DREM
   | DREMU
   | DROL
   | DROR
   | DSRA
   | DSLL
   | DSRL
   datatype unary =
     ABS
   | NEG
   | NEGU
   | NOT
   | DABS
   | DNEG
   | DNEGU
   datatype multiply =
     MULT
   | MULTU
   | DMULT
   | DMULTU
   datatype divide =
     DIV
   | DIVU
   | DDIV
   | DDIVU
   datatype trap =
     TEQ
   | TNE
   | TLT
   | TLTU
   | TGE
   | TGEU
   datatype farith =
     ADD_D
   | ADD_S
   | SUB_D
   | SUB_S
   | MUL_D
   | MUL_S
   | DIV_D
   | DIV_S
   datatype funary =
     ABS_D
   | ABS_S
   | CVT_SD
   | CVT_SW
   | CVT_DS
   | CVT_DW
   | CVT_WS
   | CVT_WD
   | CVT_SL
   | CVT_DL
   | CVT_LS
   | CVT_LD
   datatype farith3 =
     MADD_D
   | MADD_S
   | NMADD_D
   | NMADD_S
   | MSUB_D
   | MSUB_S
   | NMSUB_D
   | NMSUB_S
   datatype fround =
     TRUNC_WS
   | TRUNC_WD
   | ROUND_WS
   | ROUND_WD
   | CEIL_WD
   | CEIL_WS
   | CEILU_WD
   | CEILU_WS
   | FLOOR_WD
   | FLOOR_WS
   | FLOORU_WD
   | FLOORU_WS
   | ROUNDU_WD
   | ROUNDU_WS
   | TRUNCU_WD
   | TRUNCU_WS
   | TRUNC_LS
   | TRUNC_LD
   | ROUND_LS
   | ROUND_LD
   | CEIL_LS
   | CEIL_LD
   | FLOOR_LS
   | FLOOR_LD
   datatype fmt =
     SINGLE
   | DOUBLE
   datatype operand =
     Imm of int
   | Reg of int
   | Lab of LabelExp.labexp
   | HiLab of LabelExp.labexp
   | LoLab of LabelExp.labexp
   datatype ea =
     Direct of int
   | FDirect of int
   | Displace of {base:int, disp:int}
   type addressing_mode = (C.cell * operand)
   datatype instruction =
     NOP
   | LA of {rd:int, b:int, d:operand}
   | DLA of {rd:int, b:int, d:operand}
   | LOAD of {l:load, rd:int, b:int, d:operand, mem:Region.region}
   | STORE of {s:store, rs:int, b:int, d:operand, mem:Region.region}
   | FLOAD of {l:fload, fd:int, b:int, d:operand, mem:Region.region}
   | FSTORE of {s:fstore, fs:int, b:int, d:operand, mem:Region.region}
   | FCMP of {cond:fcond, fmt:fmt, fs1:int, fs2:int}
   | TRAP of {t:trap, rs:int, i:operand}
   | JUMP of int
   | BEQ of (bool * int * int * operand)
   | BCOP1 of (bool * operand)
   | SETBASEADDR of (operand * int)
   | LOADF of (int * operand * int * int)
   | BRANCH of (bool * int * int * operand * int * operand)
   | BRANCH_COP1 of (bool * operand * int * operand)
   | ARITH of {oper:arith, rd:int, rs:int, i:operand}
   | UNARY of {oper:unary, rd:int, rs:int}
   | MULTIPLY of {oper:multiply, rd:int, rs:int}
   | DIVIDE of {oper:divide, rd:int, rs:int}
   | MFLO of int
   | MTLO of int
   | MFHI of int
   | MTHI of int
   | BREAK of int
   | FARITH of {oper:farith, fd:int, fs1:int, fs2:int}
   | FUNARY of {oper:funary, fd:int, fs:int}
   | FARITH3 of {oper:farith3, fd:int, fs1:int, fs2:int, fs3:int}
   | FROUND of {oper:fround, fd:int, fs1:int, rs2:int}
   | MTC1 of (int * int)
   | LWC1 of (int * int * operand)
   | SWC1 of (int * int * operand)
   | LUI of (int * operand)
   | LDC1 of (int * int * operand)
   | SDC1 of (int * int * operand)
   | COPY of {dst:int list, src:int list, impl:instruction list option ref
     , tmp:ea option}
   | FCOPY of {dst:int list, src:int list, impl:instruction list option ref
     , tmp:ea option}
   | ANNOTATION of {i:instruction, a:Annotations.annotation}
   | PHI of {}
   | SOURCE of {}
   | SINK of {}
end

