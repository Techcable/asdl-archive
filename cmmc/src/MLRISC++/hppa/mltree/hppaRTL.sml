(*
 * This file was automatically generated by MDGen (v2.0)
 * from the machine description file "hppa/hppa.md".
 *)


functor HppaRTL(BuildRTL : BUILD_RTL
)= struct
   local
      open BuildRTL
   in

(*#line 4.1 "MD-2.0/basis.md"*)
      structure Basis = struct
      end


(*#line 69.7 "hppa/hppa.md"*)
      open Basis

(*#line 70.7 "hppa/hppa.md"*)
      infix 1 ||

(*#line 71.7 "hppa/hppa.md"*)
      infix 2 :=

(*#line 72.7 "hppa/hppa.md"*)
      infix 5 + -

(*#line 73.7 "hppa/hppa.md"*)
      infix 6 << >> ~>>

(*#line 74.7 "hppa/hppa.md"*)
      infix 6 * div mod

(*#line 76.7 "hppa/hppa.md"*)
      fun % x = operand 32 x

(*#line 77.7 "hppa/hppa.md"*)
      fun %% l = label 32 l

(*#line 79.7 "hppa/hppa.md"*)
      val NOP = (fn {} => Nop
                )

(*#line 80.7 "hppa/hppa.md"*)
      val COPY = (fn {dst, src} => op := 32 (idaggr 32 ( $ ("GP", 32) (forall 5 dst)), fetch 32 (idaggr 32 ( $ ("GP", 32) (forall 5 src))))
                 )

(*#line 81.7 "hppa/hppa.md"*)
      val FCOPY = (fn {dst, src} => op := 64 (idaggr 64 ( $ ("FP", 64) (forall 5 dst)), fetch 64 (idaggr 64 ( $ ("FP", 64) (forall 5 src))))
                  )

(*#line 85.7 "hppa/hppa.md"*)
      fun disp (r, i) = op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r)),  % i)

(*#line 86.7 "hppa/hppa.md"*)
      fun fdisp (r, d) = op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r)), immed 32 d)

(*#line 87.7 "hppa/hppa.md"*)
      fun indexed (r1, r2) = op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2)))

(*#line 88.7 "hppa/hppa.md"*)
      fun scaled (r1, r2, scale) = op + 32 (op << 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), scale), fetch 32 (idaggr 32 ( $ ("GP", 32) r2)))

(*#line 89.7 "hppa/hppa.md"*)
      fun autoinc (r, i) = op := 32 (idaggr 32 ( $ ("GP", 32) r), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r)), i))

(*#line 90.7 "hppa/hppa.md"*)
      fun overflowtrap {} = Nop

(*#line 92.7 "hppa/hppa.md"*)
      fun byte x = x

(*#line 93.7 "hppa/hppa.md"*)
      fun half x = x

(*#line 94.7 "hppa/hppa.md"*)
      fun word x = x

(*#line 95.7 "hppa/hppa.md"*)
      fun quad x = x

(*#line 97.7 "hppa/hppa.md"*)
      val LDO = (fn {b, i, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) b)),  % i))
                )

(*#line 98.7 "hppa/hppa.md"*)
      val LDO2 = (fn {i, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t),  % i)
                 )

(*#line 99.7 "hppa/hppa.md"*)
      val LDIL = (fn {i, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op << 32 ( % i, intConst 32 11))
                 )

(*#line 100.7 "hppa/hppa.md"*)
      val MTCTL = (fn {r, t} => op := 32 (idaggr 32 ( $ ("CR", 32) t), fetch 32 (idaggr 32 ( $ ("GP", 32) r)))
                  )

(*#line 102.7 "hppa/hppa.md"*)
      val LDW = (fn {r, i, t, mem} => op := 32 (idaggr 32 ( $ ("GP", 32) t), fetch 32 (aggb (8, 32) ( $$ ("MEM", 8) (disp (r, i), mem))))
                )

(*#line 103.7 "hppa/hppa.md"*)
      val LDH = (fn {r, i, t, mem} => op := 32 (idaggr 32 ( $ ("GP", 32) t), zx (16, 32) (half (fetch 16 (aggb (8, 16) ( $$ ("MEM", 8) (disp (r, i), mem))))))
                )

(*#line 104.7 "hppa/hppa.md"*)
      val LDB = (fn {r, i, t, mem} => op := 32 (idaggr 32 ( $ ("GP", 32) t), zx (8, 32) (byte (fetch 8 (aggb (8, 8) ( $$ ("MEM", 8) (disp (r, i), mem))))))
                )

(*#line 105.7 "hppa/hppa.md"*)
      val LDWX = (fn {r1, r2, t, mem} => op := 32 (idaggr 32 ( $ ("GP", 32) t), fetch 32 (aggb (8, 32) ( $$ ("MEM", 8) (indexed (r1, r2), mem))))
                 )

(*#line 106.7 "hppa/hppa.md"*)
      val LDWX_S = (fn {r1, r2, t, mem} => op := 32 (idaggr 32 ( $ ("GP", 32) t), fetch 32 (aggb (8, 32) ( $$ ("MEM", 8) (scaled (r1, r2, intConst 32 2), mem))))
                   )

(*#line 107.7 "hppa/hppa.md"*)
      val LDWX_M = (fn {r1, r2, t, mem} => (op := 32 (idaggr 32 ( $ ("GP", 32) t), fetch 32 (aggb (8, 32) ( $$ ("MEM", 8) (indexed (r1, r2), mem))))) || (autoinc (r1, intConst 32 1))
                   )

(*#line 108.7 "hppa/hppa.md"*)
      val LDWX_SM = (fn {r1, r2, t, mem} => (op := 32 (idaggr 32 ( $ ("GP", 32) t), fetch 32 (aggb (8, 32) ( $$ ("MEM", 8) (scaled (r1, r2, intConst 32 2), mem))))) || (autoinc (r1, intConst 32 4))
                    )

(*#line 109.7 "hppa/hppa.md"*)
      val LDHX = (fn {r1, r2, t, mem} => op := 32 (idaggr 32 ( $ ("GP", 32) t), zx (16, 32) (half (fetch 16 (aggb (8, 16) ( $$ ("MEM", 8) (indexed (r1, r2), mem))))))
                 )

(*#line 110.7 "hppa/hppa.md"*)
      val LDHX_S = (fn {r1, r2, t, mem} => op := 32 (idaggr 32 ( $ ("GP", 32) t), zx (16, 32) (half (fetch 16 (aggb (8, 16) ( $$ ("MEM", 8) (scaled (r1, r2, intConst 32 1), mem))))))
                   )

(*#line 111.7 "hppa/hppa.md"*)
      val LDHX_M = (fn {r1, r2, t, mem} => (op := 32 (idaggr 32 ( $ ("GP", 32) t), zx (16, 32) (half (fetch 16 (aggb (8, 16) ( $$ ("MEM", 8) (indexed (r1, r2), mem))))))) || (autoinc (r1, intConst 32 1))
                   )

(*#line 113.7 "hppa/hppa.md"*)
      val LDHX_SM = (fn {r1, r2, t, mem} => (op := 32 (idaggr 32 ( $ ("GP", 32) t), zx (16, 32) (half (fetch 16 (aggb (8, 16) ( $$ ("MEM", 8) (scaled (r1, r2, intConst 32 1), mem))))))) || (autoinc (r1, intConst 32 2))
                    )

(*#line 115.7 "hppa/hppa.md"*)
      val LDBX = (fn {r1, r2, t, mem} => op := 32 (idaggr 32 ( $ ("GP", 32) t), zx (8, 32) (byte (fetch 8 (aggb (8, 8) ( $$ ("MEM", 8) (indexed (r1, r2), mem))))))
                 )

(*#line 116.7 "hppa/hppa.md"*)
      val LDBX_M = (fn {r1, r2, t, mem} => (op := 32 (idaggr 32 ( $ ("GP", 32) t), zx (8, 32) (byte (fetch 8 (aggb (8, 8) ( $$ ("MEM", 8) (indexed (r1, r2), mem))))))) || (autoinc (r1, intConst 32 1))
                   )

(*#line 120.7 "hppa/hppa.md"*)
      val STW = (fn {b, d, r, mem} => op := 32 (aggb (8, 32) ( $$ ("MEM", 8) (disp (b, d), mem)), fetch 32 (idaggr 32 ( $ ("GP", 32) r)))
                )

(*#line 121.7 "hppa/hppa.md"*)
      val STH = (fn {b, d, r, mem} => op := 16 (aggb (8, 16) ( $$ ("MEM", 8) (disp (b, d), mem)), half (zx (32, 16) (fetch 32 (idaggr 32 ( $ ("GP", 32) r)))))
                )

(*#line 122.7 "hppa/hppa.md"*)
      val STB = (fn {b, d, r, mem} => op := 8 (aggb (8, 8) ( $$ ("MEM", 8) (disp (b, d), mem)), byte (zx (32, 8) (fetch 32 (idaggr 32 ( $ ("GP", 32) r)))))
                )

(*#line 125.7 "hppa/hppa.md"*)
      val ADD = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                )

(*#line 126.7 "hppa/hppa.md"*)
      val ADDL = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                 )

(*#line 127.7 "hppa/hppa.md"*)
      val ADDO = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), addt 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                 )

(*#line 128.7 "hppa/hppa.md"*)
      val SUB = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op - 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                )

(*#line 129.7 "hppa/hppa.md"*)
      val SUBO = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), subt 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                 )

(*#line 130.7 "hppa/hppa.md"*)
      val SH1ADD = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (op << 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), intConst 32 1), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                   )

(*#line 131.7 "hppa/hppa.md"*)
      val SH2ADD = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (op << 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), intConst 32 2), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                   )

(*#line 132.7 "hppa/hppa.md"*)
      val SH3ADD = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (op << 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), intConst 32 3), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                   )

(*#line 133.7 "hppa/hppa.md"*)
      val SH1ADDL = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (op << 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), intConst 32 1), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                    )

(*#line 134.7 "hppa/hppa.md"*)
      val SH2ADDL = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (op << 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), intConst 32 2), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                    )

(*#line 135.7 "hppa/hppa.md"*)
      val SH3ADDL = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (op << 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), intConst 32 3), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                    )

(*#line 136.7 "hppa/hppa.md"*)
      val SH1ADDO = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), addt 32 (op << 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), intConst 32 1), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                    )

(*#line 137.7 "hppa/hppa.md"*)
      val SH2ADDO = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), addt 32 (op << 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), intConst 32 2), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                    )

(*#line 138.7 "hppa/hppa.md"*)
      val SH3ADDO = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), addt 32 (op << 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), intConst 32 3), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                    )

(*#line 139.7 "hppa/hppa.md"*)
      val OR = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), orb 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
               )

(*#line 140.7 "hppa/hppa.md"*)
      val AND = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), andb 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                )

(*#line 141.7 "hppa/hppa.md"*)
      val XOR = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), xorb 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))))
                )

(*#line 142.7 "hppa/hppa.md"*)
      val ANDCM = (fn {r1, r2, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), andb 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), notb 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r2)))))
                  )

(*#line 144.7 "hppa/hppa.md"*)
      val ADDI = (fn {r, i, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r)),  % i))
                 )

(*#line 145.7 "hppa/hppa.md"*)
      val ADDIO = (fn {r, i, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), addt 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r)),  % i))
                  )

(*#line 146.7 "hppa/hppa.md"*)
      val ADDIL = (fn {r, i, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r)),  % i))
                  )

(*#line 147.7 "hppa/hppa.md"*)
      val SUBI = (fn {r, i, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r)),  % i))
                 )

(*#line 148.7 "hppa/hppa.md"*)
      val SUBIO = (fn {r, i, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), subt 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r)),  % i))
                  )

(*#line 151.7 "hppa/hppa.md"*)
      local
         val newOper = newOp "extru"
      in
         fun extru (x0, x1, x2) = newOper [x0, x1, x2]
      end
      local
         val newOper = newOp "extrs"
      in
         fun extrs (x0, x1, x2) = newOper [x0, x1, x2]
      end
      local
         val newOper = newOp "zdep"
      in
         fun zdep (x0, x1, x2) = newOper [x0, x1, x2]
      end

(*#line 152.7 "hppa/hppa.md"*)
      val sar = fetch 32 (idaggr 32 ( $ ("CR", 32) (intConst 5 11)))

(*#line 153.7 "hppa/hppa.md"*)
      val VEXTRU = (fn {r, len, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), extru (fetch 32 (idaggr 32 ( $ ("GP", 32) r)), sar, immed 32 len))
                   )

(*#line 154.7 "hppa/hppa.md"*)
      val VEXTRS = (fn {r, len, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), extrs (fetch 32 (idaggr 32 ( $ ("GP", 32) r)), sar, immed 32 len))
                   )

(*#line 155.7 "hppa/hppa.md"*)
      val ZVDEP = (fn {r, len, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), zdep (fetch 32 (idaggr 32 ( $ ("GP", 32) r)), sar, immed 32 len))
                  )

(*#line 156.7 "hppa/hppa.md"*)
      val EXTRU = (fn {r, p, len, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), extru (fetch 32 (idaggr 32 ( $ ("GP", 32) r)), immed 32 p, immed 32 len))
                  )

(*#line 157.7 "hppa/hppa.md"*)
      val EXTRS = (fn {r, p, len, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), extrs (fetch 32 (idaggr 32 ( $ ("GP", 32) r)), immed 32 p, immed 32 len))
                  )

(*#line 158.7 "hppa/hppa.md"*)
      val ZDEP = (fn {r, p, len, t} => op := 32 (idaggr 32 ( $ ("GP", 32) t), zdep (fetch 32 (idaggr 32 ( $ ("GP", 32) r)), immed 32 p, immed 32 len))
                 )

(*#line 160.7 "hppa/hppa.md"*)
      val comparisons = 
          let infix $$ fun x $$ y = y::x
          in  nil
             $$ geu 32
             $$ gtu 32
             $$ op > 32
             $$ op >= 32
             $$ op <> 32
             $$ leu 32
             $$ ltu 32
             $$ op <= 32
             $$ op < 32
             $$ == 32
          end


(*#line 169.7 "hppa/hppa.md"*)
      fun COMCLR_LDO cc {r1, r2, t1, i, b, t2} = If (cc (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))), op := 32 (idaggr 32 ( $ ("GP", 32) t1), intConst 32 0), op := 32 (idaggr 32 ( $ ("GP", 32) t2), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) b)), immed 32 i)))

(*#line 171.7 "hppa/hppa.md"*)
      val [COMCLR_LDO_EQ, COMCLR_LDO_LT, COMCLR_LDO_LE, COMCLR_LDO_LTU, COMCLR_LDO_LEU, COMCLR_LDO_NE, COMCLR_LDO_GE, COMCLR_LDO_GT, COMCLR_LDO_GTU, COMCLR_LDO_GEU] = map 10 COMCLR_LDO comparisons

(*#line 179.7 "hppa/hppa.md"*)
      fun COMCLR_LDO2 cc {r1, r2, t1, i, b} = If (cc (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))), op := 32 (idaggr 32 ( $ ("GP", 32) t1), intConst 32 0), op := 32 (idaggr 32 ( $ ("GP", 32) t1), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) b)), immed 32 i)))

(*#line 181.7 "hppa/hppa.md"*)
      val [COMCLR_LDO2_EQ, COMCLR_LDO2_LT, COMCLR_LDO2_LE, COMCLR_LDO2_LTU, COMCLR_LDO2_LEU, COMCLR_LDO2_NE, COMCLR_LDO2_GE, COMCLR_LDO2_GT, COMCLR_LDO2_GTU, COMCLR_LDO2_GEU] = map 10 COMCLR_LDO2 comparisons

(*#line 189.7 "hppa/hppa.md"*)
      fun COMCLR_LDO3 cc {r1, r2, t2, i, b} = If (cc (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))), Nop, op := 32 (idaggr 32 ( $ ("GP", 32) t2), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) b)), immed 32 i)))

(*#line 191.7 "hppa/hppa.md"*)
      val [COMCLR_LDO3_EQ, COMCLR_LDO3_LT, COMCLR_LDO3_LE, COMCLR_LDO3_LTU, COMCLR_LDO3_LEU, COMCLR_LDO3_NE, COMCLR_LDO3_GE, COMCLR_LDO3_GT, COMCLR_LDO3_GTU, COMCLR_LDO3_GEU] = map 10 COMCLR_LDO3 comparisons

(*#line 198.7 "hppa/hppa.md"*)
      fun COMICLR_LDO cc {i1, r2, t1, i2, b, t2} = If (cc ( % i1, fetch 32 (idaggr 32 ( $ ("GP", 32) r2))), op := 32 (idaggr 32 ( $ ("GP", 32) t1), intConst 32 0), op := 32 (idaggr 32 ( $ ("GP", 32) t2), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) b)), immed 32 i2)))

(*#line 200.7 "hppa/hppa.md"*)
      val [COMICLR_LDO_EQ, COMICLR_LDO_LT, COMICLR_LDO_LE, COMICLR_LDO_LTU, COMICLR_LDO_LEU, COMICLR_LDO_NE, COMICLR_LDO_GE, COMICLR_LDO_GT, COMICLR_LDO_GTU, COMICLR_LDO_GEU] = map 10 COMICLR_LDO comparisons

(*#line 208.7 "hppa/hppa.md"*)
      fun COMICLR_LDO2 cc {i1, r2, t1, i2, b} = If (cc ( % i1, fetch 32 (idaggr 32 ( $ ("GP", 32) r2))), op := 32 (idaggr 32 ( $ ("GP", 32) t1), intConst 32 0), op := 32 (idaggr 32 ( $ ("GP", 32) t1), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) b)), immed 32 i2)))

(*#line 210.7 "hppa/hppa.md"*)
      val [COMICLR_LDO2_EQ, COMICLR_LDO2_LT, COMICLR_LDO2_LE, COMICLR_LDO2_LTU, COMICLR_LDO2_LEU, COMICLR_LDO2_NE, COMICLR_LDO2_GE, COMICLR_LDO2_GT, COMICLR_LDO2_GTU, COMICLR_LDO2_GEU] = map 10 COMICLR_LDO2 comparisons

(*#line 218.7 "hppa/hppa.md"*)
      fun COMICLR_LDO3 cc {i1, r2, t2, i2, b} = If (cc ( % i1, fetch 32 (idaggr 32 ( $ ("GP", 32) r2))), Nop, op := 32 (idaggr 32 ( $ ("GP", 32) t2), op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) b)), immed 32 i2)))

(*#line 220.7 "hppa/hppa.md"*)
      val [COMICLR_LDO3_EQ, COMICLR_LDO3_LT, COMICLR_LDO3_LE, COMICLR_LDO3_LTU, COMICLR_LDO3_LEU, COMICLR_LDO3_NE, COMICLR_LDO3_GE, COMICLR_LDO3_GT, COMICLR_LDO3_GTU, COMICLR_LDO3_GEU] = map 10 COMICLR_LDO3 comparisons

(*#line 224.7 "hppa/hppa.md"*)
      fun COMBT cmp {r1, r2, t} = (If (cmp (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))), Jmp 32 ( %% t), Nop)) || (op := 8 (idaggr 8 ( $ ("CTRL", 8) (intConst 32 0)),  ? 8))

(*#line 226.7 "hppa/hppa.md"*)
      fun COMBF cmp {r1, r2, t} = (If (cmp (fetch 32 (idaggr 32 ( $ ("GP", 32) r1)), fetch 32 (idaggr 32 ( $ ("GP", 32) r2))), Nop, Jmp 32 ( %% t))) || (op := 8 (idaggr 8 ( $ ("CTRL", 8) (intConst 32 0)),  ? 8))

(*#line 228.7 "hppa/hppa.md"*)
      fun COMIBT T1524 cmp {i, r2, t} = (If (cmp (immed T1524 i, fetch 32 (idaggr 32 ( $ ("GP", 32) r2))), Jmp 32 ( %% t), Nop)) || (op := 8 (idaggr 8 ( $ ("CTRL", 8) (intConst 32 0)),  ? 8))

(*#line 230.7 "hppa/hppa.md"*)
      fun COMIBF T1548 cmp {i, r2, t} = (If (cmp (immed T1548 i, fetch 32 (idaggr 32 ( $ ("GP", 32) r2))), Nop, Jmp 32 ( %% t))) || (op := 8 (idaggr 8 ( $ ("CTRL", 8) (intConst 32 0)),  ? 8))

(*#line 232.7 "hppa/hppa.md"*)
      val [COMBT_EQ, COMBT_LT, COMBT_LE, COMBT_LTU, COMBT_LEU, COMBT_NE, COMBT_GE, COMBT_GT, COMBT_GTU, COMBT_GEU] = map 10 COMBT comparisons

(*#line 234.7 "hppa/hppa.md"*)
      val [COMBF_EQ, COMBF_LT, COMBF_LE, COMBF_LTU, COMBF_LEU, COMBF_NE, COMBF_GE, COMBF_GT, COMBF_GTU, COMBF_GEU] = map 10 COMBF comparisons

(*#line 236.7 "hppa/hppa.md"*)
      val [COMIBT_EQ, COMIBT_LT, COMIBT_LE, COMIBT_LTU, COMIBT_LEU, COMIBT_NE, COMIBT_GE, COMIBT_GT, COMIBT_GTU, COMIBT_GEU] = map 10 (COMIBT 32) comparisons

(*#line 238.7 "hppa/hppa.md"*)
      val [COMIBF_EQ, COMIBF_LT, COMIBF_LE, COMIBF_LTU, COMIBF_LEU, COMIBF_NE, COMIBF_GE, COMIBF_GT, COMIBF_GTU, COMIBF_GEU] = map 10 (COMIBF 32) comparisons

(*#line 241.7 "hppa/hppa.md"*)
      val B = (fn {lab} => Jmp 32 ( %% lab)
              )

(*#line 242.7 "hppa/hppa.md"*)
      val BV = (fn {x, b} => Jmp 32 (op + 32 (op << 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) x)), intConst 32 2), fetch 32 (idaggr 32 ( $ ("GP", 32) b))))
               )

(*#line 244.7 "hppa/hppa.md"*)
      val BB_BSET = (fn {p, r, t} => (If (op <> 32 (andb 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r)), op << 32 (intConst 32 1, op - 32 (intConst 32 31, immed 32 p))), intConst 32 0), Jmp 32 ( %% t), Nop)) || (op := 8 (idaggr 8 ( $ ("CTRL", 8) (intConst 32 0)),  ? 8))
                    )

(*#line 248.7 "hppa/hppa.md"*)
      val BB_BCLR = (fn {p, r, t} => (If ( == 32 (andb 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) r)), op << 32 (intConst 32 1, op - 32 (intConst 32 31, immed 32 p))), intConst 32 0), Jmp 32 ( %% t), Nop)) || (op := 8 (idaggr 8 ( $ ("CTRL", 8) (intConst 32 0)),  ? 8))
                    )

(*#line 252.7 "hppa/hppa.md"*)
      val BLE = (fn {d, b, defs, uses, mem} => (((Call 32 (op + 32 (fetch 32 (idaggr 32 ( $ ("GP", 32) b)),  % d))) || (op := 32 (idaggr 32 ( $ ("GP", 32) (intConst 5 31)),  ? 32))) || (op := 32 (idaggr 32 ( $ ("cellset", 0) defs), fetch 32 (idaggr 32 ( $ ("cellset", 0) uses))))) || (op := 8 (aggb (8, 8) ( $$ ("MEM", 8) ( ? 32, mem)), fetch 8 (aggb (8, 8) ( $$ ("MEM", 8) ( ? 32, mem)))))
                )

(*#line 259.7 "hppa/hppa.md"*)
      val FLDDS = (fn {b, d, t, mem} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (aggb (8, 64) ( $$ ("MEM", 8) (fdisp (b, d), mem))))
                  )

(*#line 260.7 "hppa/hppa.md"*)
      val FLDWS = (fn {b, d, t, mem} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (aggb (8, 64) ( $$ ("MEM", 8) (fdisp (b, d), mem))))
                  )

(*#line 261.7 "hppa/hppa.md"*)
      val FLDDX = (fn {b, x, t, mem} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (aggb (8, 64) ( $$ ("MEM", 8) (indexed (b, x), mem))))
                  )

(*#line 262.7 "hppa/hppa.md"*)
      val FLDDX_S = (fn {b, x, t, mem} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (aggb (8, 64) ( $$ ("MEM", 8) (scaled (b, x, intConst 32 3), mem))))
                    )

(*#line 263.7 "hppa/hppa.md"*)
      val FLDDX_M = (fn {b, x, t, mem} => (op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (aggb (8, 64) ( $$ ("MEM", 8) (indexed (b, x), mem))))) || (autoinc (b, intConst 32 8))
                    )

(*#line 264.7 "hppa/hppa.md"*)
      val FLDDX_SM = (fn {b, x, t, mem} => (op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (aggb (8, 64) ( $$ ("MEM", 8) (scaled (b, x, intConst 32 3), mem))))) || (autoinc (b, intConst 32 8))
                     )

(*#line 265.7 "hppa/hppa.md"*)
      val FLDWX = (fn {b, x, t, mem} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (aggb (8, 64) ( $$ ("MEM", 8) (indexed (b, x), mem))))
                  )

(*#line 266.7 "hppa/hppa.md"*)
      val FLDWX_S = (fn {b, x, t, mem} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (aggb (8, 64) ( $$ ("MEM", 8) (scaled (b, x, intConst 32 2), mem))))
                    )

(*#line 267.7 "hppa/hppa.md"*)
      val FLDWX_M = (fn {b, x, t, mem} => (op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (aggb (8, 64) ( $$ ("MEM", 8) (indexed (b, x), mem))))) || (autoinc (b, intConst 32 4))
                    )

(*#line 268.7 "hppa/hppa.md"*)
      val FLDWX_SM = (fn {b, x, t, mem} => (op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (aggb (8, 64) ( $$ ("MEM", 8) (scaled (b, x, intConst 32 2), mem))))) || (autoinc (b, intConst 32 4))
                     )

(*#line 271.7 "hppa/hppa.md"*)
      val FSTDS = (fn {b, d, r, mem} => op := 64 (aggb (8, 64) ( $$ ("MEM", 8) (fdisp (b, d), mem)), fetch 64 (idaggr 64 ( $ ("FP", 64) r)))
                  )

(*#line 272.7 "hppa/hppa.md"*)
      val FSTWS = (fn {b, d, r, mem} => op := 64 (aggb (8, 64) ( $$ ("MEM", 8) (fdisp (b, d), mem)), fetch 64 (idaggr 64 ( $ ("FP", 64) r)))
                  )

(*#line 273.7 "hppa/hppa.md"*)
      val FSTDX = (fn {b, x, r, mem} => op := 64 (aggb (8, 64) ( $$ ("MEM", 8) (indexed (b, x), mem)), fetch 64 (idaggr 64 ( $ ("FP", 64) r)))
                  )

(*#line 274.7 "hppa/hppa.md"*)
      val FSTDX_S = (fn {b, x, r, mem} => op := 64 (aggb (8, 64) ( $$ ("MEM", 8) (scaled (b, x, intConst 32 3), mem)), fetch 64 (idaggr 64 ( $ ("FP", 64) r)))
                    )

(*#line 275.7 "hppa/hppa.md"*)
      val FSTDX_M = (fn {b, x, r, mem} => (op := 64 (aggb (8, 64) ( $$ ("MEM", 8) (indexed (b, x), mem)), fetch 64 (idaggr 64 ( $ ("FP", 64) r)))) || (autoinc (b, intConst 32 8))
                    )

(*#line 276.7 "hppa/hppa.md"*)
      val FSTDX_SM = (fn {b, x, r, mem} => (op := 64 (aggb (8, 64) ( $$ ("MEM", 8) (scaled (b, x, intConst 32 3), mem)), fetch 64 (idaggr 64 ( $ ("FP", 64) r)))) || (autoinc (b, intConst 32 8))
                     )

(*#line 277.7 "hppa/hppa.md"*)
      val FSTWX = (fn {b, x, r, mem} => op := 64 (aggb (8, 64) ( $$ ("MEM", 8) (indexed (b, x), mem)), fetch 64 (idaggr 64 ( $ ("FP", 64) r)))
                  )

(*#line 278.7 "hppa/hppa.md"*)
      val FSTWX_S = (fn {b, x, r, mem} => op := 64 (aggb (8, 64) ( $$ ("MEM", 8) (scaled (b, x, intConst 32 2), mem)), fetch 64 (idaggr 64 ( $ ("FP", 64) r)))
                    )

(*#line 279.7 "hppa/hppa.md"*)
      val FSTWX_M = (fn {b, x, r, mem} => (op := 64 (aggb (8, 64) ( $$ ("MEM", 8) (indexed (b, x), mem)), fetch 64 (idaggr 64 ( $ ("FP", 64) r)))) || (autoinc (b, intConst 32 4))
                    )

(*#line 280.7 "hppa/hppa.md"*)
      val FSTWX_SM = (fn {b, x, r, mem} => (op := 64 (aggb (8, 64) ( $$ ("MEM", 8) (scaled (b, x, intConst 32 2), mem)), fetch 64 (idaggr 64 ( $ ("FP", 64) r)))) || (autoinc (b, intConst 32 4))
                     )

(*#line 283.7 "hppa/hppa.md"*)
      val FADD_S = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fadd 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 284.7 "hppa/hppa.md"*)
      val FADD_D = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fadd 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 285.7 "hppa/hppa.md"*)
      val FADD_Q = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fadd 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 286.7 "hppa/hppa.md"*)
      val FSUB_S = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fsub 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 287.7 "hppa/hppa.md"*)
      val FSUB_D = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fsub 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 288.7 "hppa/hppa.md"*)
      val FSUB_Q = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fsub 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 289.7 "hppa/hppa.md"*)
      val FMPY_S = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fsub 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 290.7 "hppa/hppa.md"*)
      val FMPY_D = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fmul 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 291.7 "hppa/hppa.md"*)
      val FMPY_Q = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fmul 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 292.7 "hppa/hppa.md"*)
      val FDIV_S = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fdiv 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 293.7 "hppa/hppa.md"*)
      val FDIV_D = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fdiv 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 294.7 "hppa/hppa.md"*)
      val FDIV_Q = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fdiv 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                   )

(*#line 295.7 "hppa/hppa.md"*)
      val XMPYU = (fn {r1, r2, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), muls 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) r1)), fetch 64 (idaggr 64 ( $ ("FP", 64) r2))))
                  )

(*#line 298.7 "hppa/hppa.md"*)
      local
         val newOper = newOp "cvtf2i"
      in
         fun cvtf2i x0 = newOper [x0]
      end

(*#line 299.7 "hppa/hppa.md"*)
      val FCPY_S = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (idaggr 64 ( $ ("FP", 64) f)))
                   )

(*#line 300.7 "hppa/hppa.md"*)
      val FCPY_D = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (idaggr 64 ( $ ("FP", 64) f)))
                   )

(*#line 301.7 "hppa/hppa.md"*)
      val FCPY_Q = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fetch 64 (idaggr 64 ( $ ("FP", 64) f)))
                   )

(*#line 302.7 "hppa/hppa.md"*)
      val FABS_S = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fabs 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                   )

(*#line 303.7 "hppa/hppa.md"*)
      val FABS_D = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fabs 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                   )

(*#line 304.7 "hppa/hppa.md"*)
      val FABS_Q = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fabs 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                   )

(*#line 305.7 "hppa/hppa.md"*)
      val FSQRT_S = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fsqrt 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                    )

(*#line 306.7 "hppa/hppa.md"*)
      val FSQRT_D = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fsqrt 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                    )

(*#line 307.7 "hppa/hppa.md"*)
      val FSQRT_Q = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fsqrt 64 (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                    )

(*#line 308.7 "hppa/hppa.md"*)
      val FRND_S = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), cvtf2i (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                   )

(*#line 309.7 "hppa/hppa.md"*)
      val FRND_D = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), cvtf2i (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                   )

(*#line 310.7 "hppa/hppa.md"*)
      val FRND_Q = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), cvtf2i (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                   )

(*#line 313.7 "hppa/hppa.md"*)
      local
         val newOper = newOp "fcnvff_sd"
      in
         fun fcnvff_sd x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvff_sq"
      in
         fun fcnvff_sq x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvff_ds"
      in
         fun fcnvff_ds x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvff_dq"
      in
         fun fcnvff_dq x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvff_qs"
      in
         fun fcnvff_qs x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvff_qd"
      in
         fun fcnvff_qd x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvxf_s"
      in
         fun fcnvxf_s x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvxf_d"
      in
         fun fcnvxf_d x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvxf_q"
      in
         fun fcnvxf_q x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvfx_s"
      in
         fun fcnvfx_s x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvfx_d"
      in
         fun fcnvfx_d x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvfx_q"
      in
         fun fcnvfx_q x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvfxt_s"
      in
         fun fcnvfxt_s x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvfxt_d"
      in
         fun fcnvfxt_d x0 = newOper [x0]
      end
      local
         val newOper = newOp "fcnvfxt_q"
      in
         fun fcnvfxt_q x0 = newOper [x0]
      end

(*#line 319.7 "hppa/hppa.md"*)
      val FCNVFF_SD = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvff_sd (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                      )

(*#line 320.7 "hppa/hppa.md"*)
      val FCNVFF_SQ = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvff_sq (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                      )

(*#line 321.7 "hppa/hppa.md"*)
      val FCNVFF_DS = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvff_ds (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                      )

(*#line 322.7 "hppa/hppa.md"*)
      val FCNVFF_DQ = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvff_dq (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                      )

(*#line 323.7 "hppa/hppa.md"*)
      val FCNVFF_QS = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvff_qs (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                      )

(*#line 324.7 "hppa/hppa.md"*)
      val FCNVFF_QD = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvff_qd (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                      )

(*#line 326.7 "hppa/hppa.md"*)
      val FCNVXF_S = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvxf_s (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                     )

(*#line 327.7 "hppa/hppa.md"*)
      val FCNVXF_D = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvxf_d (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                     )

(*#line 328.7 "hppa/hppa.md"*)
      val FCNVXF_Q = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvxf_q (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                     )

(*#line 330.7 "hppa/hppa.md"*)
      val FCNVFX_S = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvfx_s (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                     )

(*#line 331.7 "hppa/hppa.md"*)
      val FCNVFX_D = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvfx_d (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                     )

(*#line 332.7 "hppa/hppa.md"*)
      val FCNVFX_Q = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvfx_q (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                     )

(*#line 334.7 "hppa/hppa.md"*)
      val FCNVFXT_S = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvfxt_s (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                      )

(*#line 335.7 "hppa/hppa.md"*)
      val FCNVFXT_D = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvfxt_d (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                      )

(*#line 336.7 "hppa/hppa.md"*)
      val FCNVFXT_Q = (fn {f, t} => op := 64 (idaggr 64 ( $ ("FP", 64) t), fcnvfxt_q (fetch 64 (idaggr 64 ( $ ("FP", 64) f))))
                      )

(*#line 339.7 "hppa/hppa.md"*)
      fun FBRANCH cmp {f1, f2, t} = If (cmp (fetch 64 (idaggr 64 ( $ ("FP", 64) f1)), fetch 64 (idaggr 64 ( $ ("FP", 64) f2))), Jmp 32 ( %% t), Nop)

(*#line 342.7 "hppa/hppa.md"*)
      val FBRANCH__63 = FBRANCH ( |?| 64)
      and FBRANCH__33_60_61_62 = FBRANCH ( |!<=>| 64)
      and FBRANCH__61_61 = FBRANCH ( |==| 64)
      and FBRANCH__63_61 = FBRANCH ( |?=| 64)
      and FBRANCH__33_60_62 = FBRANCH ( |!<>| 64)
      and FBRANCH__33_63_62_61 = FBRANCH ( |!?>=| 64)
      and FBRANCH__60 = FBRANCH ( |<| 64)
      and FBRANCH__63_60 = FBRANCH ( |?<| 64)
      and FBRANCH__33_62_61 = FBRANCH ( |!>=| 64)
      and FBRANCH__33_63_62 = FBRANCH ( |!?>| 64)
      and FBRANCH__60_61 = FBRANCH ( |<=| 64)
      and FBRANCH__63_60_61 = FBRANCH ( |?<=| 64)
      and FBRANCH__33_62 = FBRANCH ( |!>| 64)
      and FBRANCH__33_63_60_61 = FBRANCH ( |!?<=| 64)
      and FBRANCH__62 = FBRANCH ( |>| 64)
      and FBRANCH__63_62 = FBRANCH ( |?>| 64)
      and FBRANCH__33_60_61 = FBRANCH ( |!<=| 64)
      and FBRANCH__33_63_60 = FBRANCH ( |!?<| 64)
      and FBRANCH__62_61 = FBRANCH ( |>=| 64)
      and FBRANCH__63_62_61 = FBRANCH ( |?>=| 64)
      and FBRANCH__33_60 = FBRANCH ( |!<| 64)
      and FBRANCH__33_63_61 = FBRANCH ( |!?=| 64)
      and FBRANCH__60_62 = FBRANCH ( |<>| 64)
      and FBRANCH__33_61 = FBRANCH ( |!=| 64)
      and FBRANCH__33_63 = FBRANCH ( |!?| 64)
      and FBRANCH__60_61_62 = FBRANCH ( |<=>| 64)
      and FBRANCH__63_60_62 = FBRANCH ( |?<>| 64)
   end
end

