module zsuif (imports StdTypes) {
big_int  = (int)
suif_int = Finite(big_int)
         | PlusInf
         | NegInf
         | UnsignedInf
         | Undetermined

-- Zephyr SUIF a simplified interface for SUIF 2.0

constant = IntConstant(suif_int)
         | FloatConstant(string)

symbol = (StdTypes.nat uid, identifier name)

-- reorganized type hierarchy 
type_id  = (StdTypes.nat)

type = Data(data_type)
     | Procedure(procedure_type)
     | Qualified(qualification* qualifications, type type)
     | Void 

procedure_type = 
    CProcedureType(type result_type, 
	           StdTypes.bool has_varargs,
	           StdTypes.bool arguments_known,
                   int bit_alignment,
	           type* args)
data_type =
     BooleanType 
   | IntegerType  
   | UIntegerType 
   | FloatingPointType
   | EnumeratedType(string name, enumerate_case* cases)
   | PointerType(type_id reference_type)
   | ArrayType(type element_type, 
	       expression lower_bound, expression upper_bound)
   | GroupType(string name, StdTypes.bool is_complete, group_field* fields)
   attributes(suif_int bit_size,int bit_alignment)

group_field    = (field_symbol name, type type, expression bit_offset)
enumerate_case = (string name, suif_int case_constant)
qualification  = (string qualifier)

type_table_entry = (type_id key, type value)
type_table       = (type_table_entry* entries)

code_label_symbol = (symbol)
procedure_symbol  = (symbol)
variable_symbol   = (symbol)
field_symbol      = (symbol)
parameter_symbol  = (symbol)

symbol_table_entry = 
       CodeLabelEntry
     | ProcedureEntry(procedure_definition def)
     | VariableEntry(variable_definition def, StdTypes.bool is_local)
     | ParameterEntry(parameter_symbol name, type_id type)
     | FieldEntry(expression bit_offset)
     | NestedVariable(variable_symbol start, expression bit_offset)
     attributes (symbol key, StdTypes.bool address_taken)

symbol_table = (symbol_table_entry* entries)

procedure_definition =
  (procedure_symbol name,
   qualification* qualifications, 
   procedure_type procedure_type,
   procedure_body? procedure_body)

procedure_body = (parameter_symbol* params, statement body)

variable_definition = (variable_symbol name,
                       type_id type,
                       value_block? value_block)

value_block = 
    ExpressionValueBlock(expression expression)
  | MultiValueBlock(multi_value_block_init* inits)
  | RepeatValueBlock(int count, value_block block) 
  | UndefinedValueBlock
  attributes(type_id data_type)

definition_block = 
  (variable_symbol*  defined_variables,
   procedure_symbol* defined_procedures)

file_block = 
  (string source_file_name, definition_block definition_block)

file_set_block = 
  (file_block* file_blocks,
   type_table type_table,
   symbol_table symbol_table,
   symbol_table extern_symbol_table,
   global_information_block information_block)

statement =
   EvalStatement(expression* expressions)
 | StatementList(statement* statements)
 | IfStatement(expression condition, statement then_part, statement else_part)
 | WhileStatement(expression condition, statement body,
                  code_label_symbol? break_label,
                  code_label_symbol? continue_label)
 | DoWhileStatement(expression condition, statement body,
                    code_label_symbol? break_label,
                    code_label_symbol? continue_label)

 | ForStatement(variable_symbol index, 
	        expression lower_bound,
                expression upper_bound, 
                expression step,
                binop init_comparison_opcode, 
                statement body,
                statement? pre_pad, 
                statement? post_pad,
                code_label_symbol? break_label,
                code_label_symbol? continue_label)
 | ScopeStatement(statement body, definition_block definition_block)
 | MarkStatement
 | VaStartStatement(expression ap_address, parameter_symbol parmn)
 | VaStartOldStatement(expression ap_address)
 | VaEndStatement(expression ap_address)
 | StoreStatement(expression data_operand, expression destination_address)
 | ReturnStatement(expression* return_values)
 | JumpStatement(code_label_symbol target)
 | JumpIndirectStatement(expression itarget)
 | BranchStatement(expression decision_operand, code_label_symbol target)
 | MultiWayBranchStatement(expression decision_operand,
	                   code_label_symbol default_target,
                           multi_way_branch_case* cases)
 | LabelLocationStatement (code_label_symbol defined_label)
 | StoreVariableStatement(variable_symbol destination, expression value)
 | NopStatement

multi_way_branch_case = (constant case_constant,
                         code_label_symbol case_target)
binop =
   Add
 | Subtract
 | Multiply
 | Divide
 | Remainder
 | Bitwise_and
 | Bitwise_or
 | Bitwise_nand
 | Bitwise_nor
 | Bitwise_xor
 | Left_shift
 | Right_shift
 | Rotate
 | Is_equal_to
 | Is_not_equal_to
 | Is_less_than
 | Is_less_than_or_equal_to
 | Is_greater_than
 | Is_greater_than_or_equal_to
 | Logical_and -- (not short-circuited)
 | Logical_or -- (not short-circuited)
 | Maximum
 | Minimum

unop = 
   Negate
 | Invert
 | Absolute_value
 | Bitwise_not
 | Logical_not
 | Convert
 | Treat_as

-- all instructions have at least one dest op listed in the attributes code

expression =
   BinaryExpression(binop binop, expression source1, expression source2)
 | UnaryExpression(unop unop,expression source)
 | CopyExpression(expression source)
 | SelectExpression(expression selector, expression selection1,
	            expression selection2)
 | ArrayReferenceExpression(expression base_array_address, expression index)
 | FieldAccessExpression(expression base_group_address, field_symbol field) 
 | BitSizeOfExpression(type_id ref_type)            
 | ByteSizeOfExpression(type_id ref_type)
 | BitAlignmentOfExpression(type_id ref_type)
 | ByteAlignmentOfExpression(type_id ref_type)	
 | BitOffsetOfExpression(field_symbol field)
 | ByteOffsetOfExpression(field_symbol field)
 | VaArgExpression(expression ap_address)
 | ScAndExpression(expression source1, expression source2)
 | ScOrExpression(expression source1, expression source2)
 | ScSelectExpression(expression selector, expression selection1,
	              expression selection2)
 | LoadExpression(expression source_address)
 | SymbolAddressExpression(symbol addressed_symbol)
 | LoadValueBlockExpression(value_block value_block)
 | CallExpression(expression callee_address,expression* arguments) 	       
 | LoadVariableExpression(variable_symbol variable)
 | SsaPhiExpression(variable_symbol* variables)
 | Constant(constant value)
attributes(type_id result_type)


multi_value_block_init = (int bit_offset, value_block block)
-- just stubbed out for now 
global_information_block = C_information_block 
--     (type_id signed_char_type,	
--   	type_id unsigned_char_type,
--   	type_id	char_type,
--	type_id	signed_short_type,
--	type_id	unsigned_short_type,
--	type_id	signed_int_type,
--	type_id	unsigned_int_type,
--	type_id	signed_long_type,
--	type_id	unsigned_long_type,
--	type_id	signed_long_long_type,
--	type_id	unsigned_long_long_type,
--	type_id	float_type,
--	type_id	double_type,
--	type_id	long_double_type,
--	type_id	type file_type,
--	type_id	ptrdiff_t_type,
--	type_id	size_t_type)
}

view Doc { 

<= doc_string { 
module zsuif 
%%
<p> A simplified interface to SUIF, designed for frontend and backend
interfaces into the main SUIF infrastructure. It's not designed to be
used as an optimization framework. This interface differs 
from the actual C++ implementation, but tries to preserver the
underlying semantics of the original C++ interface. This currently
only supports core SUIF and not any of the extensibility infrastructure. 

<p> Significant differences between the original SUIF an the
simplified version are described below. There's been some effort put
into keeping many of the same names found in the original SUIF
definition. This interface diverges primary to it's handling of symbols
and scope resolution.

%%
-- zsuif.type           
--  zsuif.type_table_entry       : TypeTableEntry 
--  zsuif.type_table             : TypeTable       
--  zsuif.parameter_symbol       : ParameterSymbol  
  zsuif.symbol %%
A symbol is a unique id followed by a non-unqiue printable name. 
%%

  zsuif.symbol_table 
%% 
<p> In The original C++ version of SUIF, each scope contained a
separate symbol table of objects defined in that scope. In our
interface there is one symbol table per file-set. Scopes have been
resolved and all symbols are unique. To preserve the scope information
found in the original C++ versions this interface remembers
where a symbol definition introduced.
%%
  zsuif.statement
%%
Statements describe the flow control semantics of the program.
%%
  zsuif.instruction           
%%
Instructions preform computation and can be either dags or trees.
%%

zsuif.source_op 
%%
Locations where values can be read from
%%

}

}

view Java {

-- remap names in java
<= source_name {
  zsuif.suif_int               : SuifInt 
  zsuif.constant               : Constant 
  zsuif.source_op              : SourceOp 
  zsuif.destination_op         : DestinationOp 
  zsuif.symbol                 : Symbol  
  zsuif.type_id                : TypeId  
  zsuif.type                   : Type 
  zsuif.procedure_type         : ProcedureType 
  zsuif.data_type              : DataType 
  zsuif.group_field            : GroupField    
  zsuif.enumerate_case         : EnumerateCase 
  zsuif.qualification          : Qualification  
  zsuif.type_table_entry       : TypeTableEntry 
  zsuif.type_table             : TypeTable       
  zsuif.code_label_symbol      : CodeLabelSymbol 
  zsuif.procedure_symbol       : ProcedureSymbol  
  zsuif.register_symbol        : RegisterSymbol   
  zsuif.variable_symbol        : VariableSymbol   
  zsuif.field_symbol           : FieldSymbol      
  zsuif.parameter_symbol       : ParameterSymbol  
  zsuif.symbol_table_entry     : SymbolTableEntry 
  zsuif.symbol_table           : SymbolTable 
  zsuif.procedure_definition   : ProcedureDefinition 
  zsuif.variable_definition    : VariableDefinition 
  zsuif.value_block            : ValueBlock 
  zsuif.definition_block       : DefinitionBlock 
  zsuif.file_block             : FileBlock 
  zsuif.file_set_block         : FileSetBlock 
  zsuif.statement              : Statement 
  zsuif.instruction            : Instruction 
  zsuif.element_dst            : ElementDst 
  zsuif.element_src            : ElementSrc 
  zsuif.field_dst              : FieldDst 
  zsuif.field_src              : FieldSrc  
  zsuif.return_value           : ReturnValue  
  zsuif.multi_way_branch_case  : MultiWayBranchCase 
  zsuif.multi_value_block_init : MultiValueBlockInit 
 }

}

view Cxx {
zsuif.big_int <= { 
 natural_type: MP_T
       reader: read_cii_MP_T 
       writer: write_cii_MP_T 
 }
module StdTypes <= suppress : false
module StdTypes <= is_library : false
}

view SML {
zsuif.big_int <= { 
natural_type: IntInf.int
      reader: BigBase.read_int
      writer: BigBase.write_int
 }
module StdTypes <= suppress : false
module StdTypes <= is_library : false
}
